{"ast":null,"code":"import * as React from 'react';\nimport { InteractionContext } from '../context/InteractionProvider';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { SVGContext, DrawingContext } from '../context/DrawingProvider';\nimport { isBandScale } from '../internals/isBandScale';\nexport const useAxisEvents = disableAxisListener => {\n  const svgRef = React.useContext(SVGContext);\n  const {\n    width,\n    height,\n    top,\n    left\n  } = React.useContext(DrawingContext);\n  const {\n    xAxis,\n    yAxis,\n    xAxisIds,\n    yAxisIds\n  } = React.useContext(CartesianContext);\n  const {\n    dispatch\n  } = React.useContext(InteractionContext);\n  const usedXAxis = xAxisIds[0];\n  const usedYAxis = yAxisIds[0]; // Use a ref to avoid rerendering on every mousemove event.\n\n  const mousePosition = React.useRef({\n    x: -1,\n    y: -1\n  });\n  React.useEffect(() => {\n    const element = svgRef.current;\n\n    if (element === null || disableAxisListener) {\n      return () => {};\n    }\n\n    const getUpdate = (axisConfig, mouseValue) => {\n      if (usedXAxis === null) {\n        return null;\n      }\n\n      const {\n        scale,\n        data: axisData\n      } = axisConfig;\n\n      if (!isBandScale(scale)) {\n        const value = scale.invert(mouseValue);\n\n        if (axisData === undefined) {\n          return {\n            value\n          };\n        }\n\n        const closestIndex = axisData == null ? void 0 : axisData.findIndex((v, index) => {\n          if (v > value) {\n            // @ts-ignore\n            if (index === 0 || Math.abs(value - v) <= Math.abs(value - axisData[index - 1])) {\n              return true;\n            }\n          }\n\n          if (v <= value) {\n            if (index === axisData.length - 1 || // @ts-ignore\n            Math.abs(value - v) < Math.abs(value - axisData[index + 1])) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n        return {\n          value: closestIndex !== undefined && closestIndex >= 0 ? axisData[closestIndex] : value,\n          index: closestIndex\n        };\n      }\n\n      const dataIndex = scale.bandwidth() === 0 ? Math.floor((mouseValue - Math.min(...scale.range()) + scale.step() / 2) / scale.step()) : Math.floor((mouseValue - Math.min(...scale.range())) / scale.step());\n\n      if (dataIndex < 0 || dataIndex >= axisData.length) {\n        return null;\n      }\n\n      return {\n        index: dataIndex,\n        value: axisData[dataIndex]\n      };\n    };\n\n    const handleMouseOut = () => {\n      mousePosition.current = {\n        x: -1,\n        y: -1\n      };\n      dispatch({\n        type: 'updateAxis',\n        data: {\n          x: null,\n          y: null\n        }\n      });\n    };\n\n    const handleMouseMove = event => {\n      // Get mouse coordinate in global SVG space\n      const pt = svgRef.current.createSVGPoint();\n      pt.x = event.clientX;\n      pt.y = event.clientY;\n      const svgPt = pt.matrixTransform(svgRef.current.getScreenCTM().inverse());\n      mousePosition.current = {\n        x: svgPt.x,\n        y: svgPt.y\n      };\n      const outsideX = svgPt.x < left || svgPt.x > left + width;\n      const outsideY = svgPt.y < top || svgPt.y > top + height;\n\n      if (outsideX || outsideY) {\n        dispatch({\n          type: 'updateAxis',\n          data: {\n            x: null,\n            y: null\n          }\n        });\n        return;\n      }\n\n      const newStateX = getUpdate(xAxis[usedXAxis], svgPt.x);\n      const newStateY = getUpdate(yAxis[usedYAxis], svgPt.y);\n      dispatch({\n        type: 'updateAxis',\n        data: {\n          x: newStateX,\n          y: newStateY\n        }\n      });\n    };\n\n    element.addEventListener('mouseout', handleMouseOut);\n    element.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      element.removeEventListener('mouseout', handleMouseOut);\n      element.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [svgRef, dispatch, left, width, top, height, usedYAxis, yAxis, usedXAxis, xAxis, disableAxisListener]);\n};","map":{"version":3,"names":["React","InteractionContext","CartesianContext","SVGContext","DrawingContext","isBandScale","useAxisEvents","disableAxisListener","svgRef","useContext","width","height","top","left","xAxis","yAxis","xAxisIds","yAxisIds","dispatch","usedXAxis","usedYAxis","mousePosition","useRef","x","y","useEffect","element","current","getUpdate","axisConfig","mouseValue","scale","data","axisData","value","invert","undefined","closestIndex","findIndex","v","index","Math","abs","length","dataIndex","bandwidth","floor","min","range","step","handleMouseOut","type","handleMouseMove","event","pt","createSVGPoint","clientX","clientY","svgPt","matrixTransform","getScreenCTM","inverse","outsideX","outsideY","newStateX","newStateY","addEventListener","removeEventListener"],"sources":["/Users/suprimpoudel/WebstormProjects/bus_buddy_web/node_modules/@mui/x-charts/esm/hooks/useAxisEvents.js"],"sourcesContent":["import * as React from 'react';\nimport { InteractionContext } from '../context/InteractionProvider';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { SVGContext, DrawingContext } from '../context/DrawingProvider';\nimport { isBandScale } from '../internals/isBandScale';\nexport const useAxisEvents = disableAxisListener => {\n  const svgRef = React.useContext(SVGContext);\n  const {\n    width,\n    height,\n    top,\n    left\n  } = React.useContext(DrawingContext);\n  const {\n    xAxis,\n    yAxis,\n    xAxisIds,\n    yAxisIds\n  } = React.useContext(CartesianContext);\n  const {\n    dispatch\n  } = React.useContext(InteractionContext);\n  const usedXAxis = xAxisIds[0];\n  const usedYAxis = yAxisIds[0];\n\n  // Use a ref to avoid rerendering on every mousemove event.\n  const mousePosition = React.useRef({\n    x: -1,\n    y: -1\n  });\n  React.useEffect(() => {\n    const element = svgRef.current;\n    if (element === null || disableAxisListener) {\n      return () => {};\n    }\n    const getUpdate = (axisConfig, mouseValue) => {\n      if (usedXAxis === null) {\n        return null;\n      }\n      const {\n        scale,\n        data: axisData\n      } = axisConfig;\n      if (!isBandScale(scale)) {\n        const value = scale.invert(mouseValue);\n        if (axisData === undefined) {\n          return {\n            value\n          };\n        }\n        const closestIndex = axisData == null ? void 0 : axisData.findIndex((v, index) => {\n          if (v > value) {\n            // @ts-ignore\n            if (index === 0 || Math.abs(value - v) <= Math.abs(value - axisData[index - 1])) {\n              return true;\n            }\n          }\n          if (v <= value) {\n            if (index === axisData.length - 1 ||\n            // @ts-ignore\n            Math.abs(value - v) < Math.abs(value - axisData[index + 1])) {\n              return true;\n            }\n          }\n          return false;\n        });\n        return {\n          value: closestIndex !== undefined && closestIndex >= 0 ? axisData[closestIndex] : value,\n          index: closestIndex\n        };\n      }\n      const dataIndex = scale.bandwidth() === 0 ? Math.floor((mouseValue - Math.min(...scale.range()) + scale.step() / 2) / scale.step()) : Math.floor((mouseValue - Math.min(...scale.range())) / scale.step());\n      if (dataIndex < 0 || dataIndex >= axisData.length) {\n        return null;\n      }\n      return {\n        index: dataIndex,\n        value: axisData[dataIndex]\n      };\n    };\n    const handleMouseOut = () => {\n      mousePosition.current = {\n        x: -1,\n        y: -1\n      };\n      dispatch({\n        type: 'updateAxis',\n        data: {\n          x: null,\n          y: null\n        }\n      });\n    };\n    const handleMouseMove = event => {\n      // Get mouse coordinate in global SVG space\n      const pt = svgRef.current.createSVGPoint();\n      pt.x = event.clientX;\n      pt.y = event.clientY;\n      const svgPt = pt.matrixTransform(svgRef.current.getScreenCTM().inverse());\n      mousePosition.current = {\n        x: svgPt.x,\n        y: svgPt.y\n      };\n      const outsideX = svgPt.x < left || svgPt.x > left + width;\n      const outsideY = svgPt.y < top || svgPt.y > top + height;\n      if (outsideX || outsideY) {\n        dispatch({\n          type: 'updateAxis',\n          data: {\n            x: null,\n            y: null\n          }\n        });\n        return;\n      }\n      const newStateX = getUpdate(xAxis[usedXAxis], svgPt.x);\n      const newStateY = getUpdate(yAxis[usedYAxis], svgPt.y);\n      dispatch({\n        type: 'updateAxis',\n        data: {\n          x: newStateX,\n          y: newStateY\n        }\n      });\n    };\n    element.addEventListener('mouseout', handleMouseOut);\n    element.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      element.removeEventListener('mouseout', handleMouseOut);\n      element.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [svgRef, dispatch, left, width, top, height, usedYAxis, yAxis, usedXAxis, xAxis, disableAxisListener]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}
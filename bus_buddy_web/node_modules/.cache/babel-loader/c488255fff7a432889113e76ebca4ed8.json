{"ast":null,"code":"/*\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n'use strict';\n\nvar punycode = require('punycode');\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n} // Reference: RFC 3986, RFC 1808, RFC 2396\n\n/*\n * define these here so at least they only have to be\n * compiled once on the first module load.\n */\n\n\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n    // Special case for a simple path URL\nsimplePathPattern = /^(\\/\\/?(?!\\/)[^?\\s]*)(\\?[^\\s]*)?$/,\n\n/*\n * RFC 2396: characters reserved for delimiting URLs.\n * We actually just auto-escape these.\n */\ndelims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n    // RFC 2396: characters not allowed for various reasons.\nunwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\nautoEscape = ['\\''].concat(unwise),\n\n/*\n * Characters that are never ever allowed in a hostname.\n * Note that any invalid chars are also handled, but these\n * are the ones that are *expected* to be seen, so we fast-path\n * them.\n */\nnonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\nunsafeProtocol = {\n  javascript: true,\n  'javascript:': true\n},\n    // protocols that never have a hostname.\nhostlessProtocol = {\n  javascript: true,\n  'javascript:': true\n},\n    // protocols that always contain a // bit.\nslashedProtocol = {\n  http: true,\n  https: true,\n  ftp: true,\n  gopher: true,\n  file: true,\n  'http:': true,\n  'https:': true,\n  'ftp:': true,\n  'gopher:': true,\n  'file:': true\n},\n    querystring = require('qs');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && typeof url === 'object' && url instanceof Url) {\n    return url;\n  }\n\n  var u = new Url();\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\n  if (typeof url !== 'string') {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n  /*\n   * Copy chrome, IE, opera backslash-handling behavior.\n   * Back slashes before the query string get converted to forward slashes\n   * See: https://code.google.com/p/chromium/issues/detail?id=25916\n   */\n\n\n  var queryIndex = url.indexOf('?'),\n      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n  var rest = url;\n  /*\n   * trim before proceeding.\n   * This is to support parse stuff like \"  http://foo.com  \\n\"\n   */\n\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n  /*\n   * figure out if it's got a host\n   * user@server is *always* interpreted as a hostname, and url\n   * resolution will treat //foo/bar as host=foo,path=bar because that's\n   * how the browser resolves relative URLs.\n   */\n\n\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@/]+@[^@/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n    /*\n     * there's a hostname.\n     * the first instance of /, ?, ;, or # ends the host.\n     *\n     * If there is an @ in the hostname, then non-host chars *are* allowed\n     * to the left of the last @ sign, unless some host-ending character\n     * comes *before* the @-sign.\n     * URLs are obnoxious.\n     *\n     * ex:\n     * http://a@b@c/ => user:a@b host:c\n     * http://a@b?@c => user:a host:c path:/?@c\n     */\n\n    /*\n     * v0.12 TODO(isaacs): This is not quite how Chrome does things.\n     * Review our test case against browsers more comprehensively.\n     */\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    /*\n     * at this point, either we have an explicit point where the\n     * auth portion cannot go past, or the last @ char is the decider.\n     */\n\n\n    var auth, atSign;\n\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      /*\n       * atSign must be in auth portion.\n       * http://a@b/c@d => host:b auth:a path:/c@d\n       */\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n    /*\n     * Now we have a portion which is definitely the auth.\n     * Pull that off.\n     */\n\n\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    } // the host is the remaining to the left of the first non-host char\n\n\n    hostEnd = -1;\n\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    } // if we still have not hit it, then the entire thing is a host.\n\n\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd); // pull out port.\n\n    this.parseHost();\n    /*\n     * we've indicated that there is a hostname,\n     * so even if it's empty, it has to be present.\n     */\n\n    this.hostname = this.hostname || '';\n    /*\n     * if hostname begins with [ and ends with ]\n     * assume that it's an IPv6 address.\n     */\n\n    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.\n\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n\n        if (!part) {\n          continue;\n        }\n\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              /*\n               * we replace non-ASCII char with a temporary placeholder\n               * we need this to make sure size of hostname is not\n               * broken by replacing non-ASCII by nothing\n               */\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          } // we test again with ASCII char only\n\n\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      /*\n       * IDNA Support: Returns a punycoded representation of \"domain\".\n       * It only converts parts of the domain name that\n       * have non-ASCII characters, i.e. it doesn't matter if\n       * you call it with a domain that already is ASCII-only.\n       */\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n    /*\n     * strip [ and ] from the hostname\n     * the host field still retains them, though\n     */\n\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n  /*\n   * now rest is set to the post-host stuff.\n   * chop off any delim chars.\n   */\n\n\n  if (!unsafeProtocol[lowerProto]) {\n    /*\n     * First, make 100% sure that any \"autoEscape\" chars get\n     * escaped, even if encodeURIComponent doesn't think they\n     * need to be.\n     */\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n\n      if (rest.indexOf(ae) === -1) {\n        continue;\n      }\n\n      var esc = encodeURIComponent(ae);\n\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n\n      rest = rest.split(ae).join(esc);\n    }\n  } // chop off from the tail first.\n\n\n  var hash = rest.indexOf('#');\n\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n\n  var qm = rest.indexOf('?');\n\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n\n  if (rest) {\n    this.pathname = rest;\n  }\n\n  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n    this.pathname = '/';\n  } // to support http.request\n\n\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  } // finally, reconstruct the href based on what has been validated.\n\n\n  this.href = this.format();\n  return this;\n}; // format a parsed object into a url string\n\n\nfunction urlFormat(obj) {\n  /*\n   * ensure it's an object, and not a string url.\n   * If it's an obj, this is a no-op.\n   * this way, you can call url_format() on strings\n   * to clean up potentially wonky urls.\n   */\n  if (typeof obj === 'string') {\n    obj = urlParse(obj);\n  }\n\n  if (!(obj instanceof Url)) {\n    return Url.prototype.format.call(obj);\n  }\n\n  return obj.format();\n}\n\nUrl.prototype.format = function () {\n  var auth = this.auth || '';\n\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');\n\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query && typeof this.query === 'object' && Object.keys(this.query).length) {\n    query = querystring.stringify(this.query, {\n      arrayFormat: 'repeat',\n      addQueryPrefix: false\n    });\n  }\n\n  var search = this.search || query && '?' + query || '';\n\n  if (protocol && protocol.substr(-1) !== ':') {\n    protocol += ':';\n  }\n  /*\n   * only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n   * unless they had them to begin with.\n   */\n\n\n  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n\n    if (pathname && pathname.charAt(0) !== '/') {\n      pathname = '/' + pathname;\n    }\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') {\n    hash = '#' + hash;\n  }\n\n  if (search && search.charAt(0) !== '?') {\n    search = '?' + search;\n  }\n\n  pathname = pathname.replace(/[?#]/g, function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function (relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) {\n    return relative;\n  }\n\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function (relative) {\n  if (typeof relative === 'string') {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n  /*\n   * hash is always overridden, no matter what.\n   * even href=\"\" will remove it.\n   */\n\n\n  result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.\n\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  } // hrefs like //foo/bar always cut to the protocol.\n\n\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n\n      if (rkey !== 'protocol') {\n        result[rkey] = relative[rkey];\n      }\n    } // urlParse appends trailing / to urls like http://www.example.com\n\n\n    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\n      result.pathname = '/';\n      result.path = result.pathname;\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    /*\n     * if it's a known url protocol, then changing\n     * the protocol does weird things\n     * first, if it's not file:, then we MUST have a host,\n     * and if there was a path\n     * to begin with, then we MUST have a path.\n     * if it is file:, then the host is dropped,\n     * because that's known to be hostless.\n     * anything else is assumed to be absolute.\n     */\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n\n      while (relPath.length && !(relative.host = relPath.shift())) {}\n\n      if (!relative.host) {\n        relative.host = '';\n      }\n\n      if (!relative.hostname) {\n        relative.hostname = '';\n      }\n\n      if (relPath[0] !== '') {\n        relPath.unshift('');\n      }\n\n      if (relPath.length < 2) {\n        relPath.unshift('');\n      }\n\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port; // to support http.request\n\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',\n      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',\n      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n  /*\n   * if the url is a non-slashed url, then relative\n   * links like ../.. should be able\n   * to crawl up to the hostname, as well.  This is strange.\n   * result.protocol has already been set by now.\n   * Later on, put the first path part into the host field.\n   */\n\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n\n    if (result.host) {\n      if (srcPath[0] === '') {\n        srcPath[0] = result.host;\n      } else {\n        srcPath.unshift(result.host);\n      }\n    }\n\n    result.host = '';\n\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n\n      if (relative.host) {\n        if (relPath[0] === '') {\n          relPath[0] = relative.host;\n        } else {\n          relPath.unshift(relative.host);\n        }\n      }\n\n      relative.host = null;\n    }\n\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = relative.host || relative.host === '' ? relative.host : result.host;\n    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath; // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    /*\n     * it's relative\n     * throw away the existing file, and take the new path instead.\n     */\n    if (!srcPath) {\n      srcPath = [];\n    }\n\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (relative.search != null) {\n    /*\n     * just pull out the search.\n     * like href='?foo'.\n     * Put this after the other two cases because it simplifies the booleans\n     */\n    if (psychotic) {\n      result.host = srcPath.shift();\n      result.hostname = result.host;\n      /*\n       * occationaly the auth can get stuck only in host\n       * this especially happens in cases like\n       * url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n       */\n\n      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.hostname = authInHost.shift();\n        result.host = result.hostname;\n      }\n    }\n\n    result.search = relative.search;\n    result.query = relative.query; // to support http.request\n\n    if (result.pathname !== null || result.search !== null) {\n      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    /*\n     * no path at all.  easy.\n     * we've already handled the other stuff above.\n     */\n    result.pathname = null; // to support http.request\n\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n\n    result.href = result.format();\n    return result;\n  }\n  /*\n   * if a url ENDs in . or .., then it must get a trailing slash.\n   * however, if it ends in anything else non-slashy,\n   * then it must NOT get a trailing slash.\n   */\n\n\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';\n  /*\n   * strip single dots, resolve double dots to parent dir\n   * if the path tries to go above the root, `up` ends up > 0\n   */\n\n  var up = 0;\n\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  } // if the path is allowed to go above the root, restore leading ..s\n\n\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back\n\n  if (psychotic) {\n    result.hostname = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';\n    result.host = result.hostname;\n    /*\n     * occationaly the auth can get stuck only in host\n     * this especially happens in cases like\n     * url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n     */\n\n    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.hostname = authInHost.shift();\n      result.host = result.hostname;\n    }\n  }\n\n  mustEndAbs = mustEndAbs || result.host && srcPath.length;\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (srcPath.length > 0) {\n    result.pathname = srcPath.join('/');\n  } else {\n    result.pathname = null;\n    result.path = null;\n  } // to support request.http\n\n\n  if (result.pathname !== null || result.search !== null) {\n    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n  }\n\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function () {\n  var host = this.host;\n  var port = portPattern.exec(host);\n\n  if (port) {\n    port = port[0];\n\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n\n    host = host.substr(0, host.length - port.length);\n  }\n\n  if (host) {\n    this.hostname = host;\n  }\n};\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\nexports.Url = Url;","map":{"version":3,"names":["punycode","require","Url","protocol","slashes","auth","host","port","hostname","hash","search","query","pathname","path","href","protocolPattern","portPattern","simplePathPattern","delims","unwise","concat","autoEscape","nonHostChars","hostEndingChars","hostnameMaxLen","hostnamePartPattern","hostnamePartStart","unsafeProtocol","javascript","hostlessProtocol","slashedProtocol","http","https","ftp","gopher","file","querystring","urlParse","url","parseQueryString","slashesDenoteHost","u","parse","prototype","TypeError","queryIndex","indexOf","splitter","uSplit","split","slashRegex","replace","join","rest","trim","length","simplePath","exec","substr","proto","lowerProto","toLowerCase","match","hostEnd","i","hec","atSign","lastIndexOf","slice","decodeURIComponent","parseHost","ipv6Hostname","hostparts","l","part","newpart","j","k","charCodeAt","validParts","notHost","bit","push","unshift","toASCII","p","h","ae","esc","encodeURIComponent","escape","qm","s","format","urlFormat","obj","call","Object","keys","stringify","arrayFormat","addQueryPrefix","charAt","urlResolve","source","relative","resolve","resolveObject","urlResolveObject","rel","result","tkeys","tk","tkey","rkeys","rk","rkey","v","relPath","shift","isSourceAbs","isRelAbs","mustEndAbs","removeAllDots","srcPath","psychotic","pop","authInHost","last","hasTrailingSlash","up","splice","isAbsolute","exports"],"sources":["/Users/suprimpoudel/WebstormProjects/bus_buddy_web/node_modules/url/url.js"],"sourcesContent":["/*\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n'use strict';\n\nvar punycode = require('punycode');\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n/*\n * define these here so at least they only have to be\n * compiled once on the first module load.\n */\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n  portPattern = /:[0-9]*$/,\n\n  // Special case for a simple path URL\n  simplePathPattern = /^(\\/\\/?(?!\\/)[^?\\s]*)(\\?[^\\s]*)?$/,\n\n  /*\n   * RFC 2396: characters reserved for delimiting URLs.\n   * We actually just auto-escape these.\n   */\n  delims = [\n    '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'\n  ],\n\n  // RFC 2396: characters not allowed for various reasons.\n  unwise = [\n    '{', '}', '|', '\\\\', '^', '`'\n  ].concat(delims),\n\n  // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n  autoEscape = ['\\''].concat(unwise),\n  /*\n   * Characters that are never ever allowed in a hostname.\n   * Note that any invalid chars are also handled, but these\n   * are the ones that are *expected* to be seen, so we fast-path\n   * them.\n   */\n  nonHostChars = [\n    '%', '/', '?', ';', '#'\n  ].concat(autoEscape),\n  hostEndingChars = [\n    '/', '?', '#'\n  ],\n  hostnameMaxLen = 255,\n  hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n  hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n  // protocols that can allow \"unsafe\" and \"unwise\" chars.\n  unsafeProtocol = {\n    javascript: true,\n    'javascript:': true\n  },\n  // protocols that never have a hostname.\n  hostlessProtocol = {\n    javascript: true,\n    'javascript:': true\n  },\n  // protocols that always contain a // bit.\n  slashedProtocol = {\n    http: true,\n    https: true,\n    ftp: true,\n    gopher: true,\n    file: true,\n    'http:': true,\n    'https:': true,\n    'ftp:': true,\n    'gopher:': true,\n    'file:': true\n  },\n  querystring = require('qs');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && typeof url === 'object' && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\n  if (typeof url !== 'string') {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  /*\n   * Copy chrome, IE, opera backslash-handling behavior.\n   * Back slashes before the query string get converted to forward slashes\n   * See: https://code.google.com/p/chromium/issues/detail?id=25916\n   */\n  var queryIndex = url.indexOf('?'),\n    splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',\n    uSplit = url.split(splitter),\n    slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  /*\n   * trim before proceeding.\n   * This is to support parse stuff like \"  http://foo.com  \\n\"\n   */\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  /*\n   * figure out if it's got a host\n   * user@server is *always* interpreted as a hostname, and url\n   * resolution will treat //foo/bar as host=foo,path=bar because that's\n   * how the browser resolves relative URLs.\n   */\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@/]+@[^@/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] && (slashes || (proto && !slashedProtocol[proto]))) {\n\n    /*\n     * there's a hostname.\n     * the first instance of /, ?, ;, or # ends the host.\n     *\n     * If there is an @ in the hostname, then non-host chars *are* allowed\n     * to the left of the last @ sign, unless some host-ending character\n     * comes *before* the @-sign.\n     * URLs are obnoxious.\n     *\n     * ex:\n     * http://a@b@c/ => user:a@b host:c\n     * http://a@b?@c => user:a host:c path:/?@c\n     */\n\n    /*\n     * v0.12 TODO(isaacs): This is not quite how Chrome does things.\n     * Review our test case against browsers more comprehensively.\n     */\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) { hostEnd = hec; }\n    }\n\n    /*\n     * at this point, either we have an explicit point where the\n     * auth portion cannot go past, or the last @ char is the decider.\n     */\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      /*\n       * atSign must be in auth portion.\n       * http://a@b/c@d => host:b auth:a path:/c@d\n       */\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    /*\n     * Now we have a portion which is definitely the auth.\n     * Pull that off.\n     */\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) { hostEnd = hec; }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) { hostEnd = rest.length; }\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    /*\n     * we've indicated that there is a hostname,\n     * so even if it's empty, it has to be present.\n     */\n    this.hostname = this.hostname || '';\n\n    /*\n     * if hostname begins with [ and ends with ]\n     * assume that it's an IPv6 address.\n     */\n    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              /*\n               * we replace non-ASCII char with a temporary placeholder\n               * we need this to make sure size of hostname is not\n               * broken by replacing non-ASCII by nothing\n               */\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      /*\n       * IDNA Support: Returns a punycoded representation of \"domain\".\n       * It only converts parts of the domain name that\n       * have non-ASCII characters, i.e. it doesn't matter if\n       * you call it with a domain that already is ASCII-only.\n       */\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    /*\n     * strip [ and ] from the hostname\n     * the host field still retains them, though\n     */\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  /*\n   * now rest is set to the post-host stuff.\n   * chop off any delim chars.\n   */\n  if (!unsafeProtocol[lowerProto]) {\n\n    /*\n     * First, make 100% sure that any \"autoEscape\" chars get\n     * escaped, even if encodeURIComponent doesn't think they\n     * need to be.\n     */\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1) { continue; }\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  // to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  /*\n   * ensure it's an object, and not a string url.\n   * If it's an obj, this is a no-op.\n   * this way, you can call url_format() on strings\n   * to clean up potentially wonky urls.\n   */\n  if (typeof obj === 'string') { obj = urlParse(obj); }\n  if (!(obj instanceof Url)) { return Url.prototype.format.call(obj); }\n  return obj.format();\n}\n\nUrl.prototype.format = function () {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n    pathname = this.pathname || '',\n    hash = this.hash || '',\n    host = false,\n    query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query && typeof this.query === 'object' && Object.keys(this.query).length) {\n    query = querystring.stringify(this.query, {\n      arrayFormat: 'repeat',\n      addQueryPrefix: false\n    });\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') { protocol += ':'; }\n\n  /*\n   * only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n   * unless they had them to begin with.\n   */\n  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') { pathname = '/' + pathname; }\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') { hash = '#' + hash; }\n  if (search && search.charAt(0) !== '?') { search = '?' + search; }\n\n  pathname = pathname.replace(/[?#]/g, function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function (relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) { return relative; }\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function (relative) {\n  if (typeof relative === 'string') {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  /*\n   * hash is always overridden, no matter what.\n   * even href=\"\" will remove it.\n   */\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol') { result[rkey] = relative[rkey]; }\n    }\n\n    // urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\n      result.pathname = '/';\n      result.path = result.pathname;\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    /*\n     * if it's a known url protocol, then changing\n     * the protocol does weird things\n     * first, if it's not file:, then we MUST have a host,\n     * and if there was a path\n     * to begin with, then we MUST have a path.\n     * if it is file:, then the host is dropped,\n     * because that's known to be hostless.\n     * anything else is assumed to be absolute.\n     */\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift())) { }\n      if (!relative.host) { relative.host = ''; }\n      if (!relative.hostname) { relative.hostname = ''; }\n      if (relPath[0] !== '') { relPath.unshift(''); }\n      if (relPath.length < 2) { relPath.unshift(''); }\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',\n    isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',\n    mustEndAbs = isRelAbs || isSourceAbs || (result.host && relative.pathname),\n    removeAllDots = mustEndAbs,\n    srcPath = result.pathname && result.pathname.split('/') || [],\n    relPath = relative.pathname && relative.pathname.split('/') || [],\n    psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  /*\n   * if the url is a non-slashed url, then relative\n   * links like ../.. should be able\n   * to crawl up to the hostname, as well.  This is strange.\n   * result.protocol has already been set by now.\n   * Later on, put the first path part into the host field.\n   */\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') { srcPath[0] = result.host; } else { srcPath.unshift(result.host); }\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') { relPath[0] = relative.host; } else { relPath.unshift(relative.host); }\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = relative.host || relative.host === '' ? relative.host : result.host;\n    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    /*\n     * it's relative\n     * throw away the existing file, and take the new path instead.\n     */\n    if (!srcPath) { srcPath = []; }\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (relative.search != null) {\n    /*\n     * just pull out the search.\n     * like href='?foo'.\n     * Put this after the other two cases because it simplifies the booleans\n     */\n    if (psychotic) {\n      result.host = srcPath.shift();\n      result.hostname = result.host;\n      /*\n       * occationaly the auth can get stuck only in host\n       * this especially happens in cases like\n       * url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n       */\n      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.hostname = authInHost.shift();\n        result.host = result.hostname;\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    // to support http.request\n    if (result.pathname !== null || result.search !== null) {\n      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    /*\n     * no path at all.  easy.\n     * we've already handled the other stuff above.\n     */\n    result.pathname = null;\n    // to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  /*\n   * if a url ENDs in . or .., then it must get a trailing slash.\n   * however, if it ends in anything else non-slashy,\n   * then it must NOT get a trailing slash.\n   */\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';\n\n  /*\n   * strip single dots, resolve double dots to parent dir\n   * if the path tries to go above the root, `up` ends up > 0\n   */\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' || (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';\n    result.host = result.hostname;\n    /*\n     * occationaly the auth can get stuck only in host\n     * this especially happens in cases like\n     * url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n     */\n    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.hostname = authInHost.shift();\n      result.host = result.hostname;\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (srcPath.length > 0) {\n    result.pathname = srcPath.join('/');\n  } else {\n    result.pathname = null;\n    result.path = null;\n  }\n\n  // to support request.http\n  if (result.pathname !== null || result.search !== null) {\n    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function () {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
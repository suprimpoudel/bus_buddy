{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport barSeriesFormatter from '../BarChart/formatter';\nimport scatterSeriesFormatter from '../ScatterChart/formatter';\nimport lineSeriesFormatter from '../LineChart/formatter';\nimport pieSeriesFormatter from '../PieChart/formatter';\nimport { defaultizeColor } from '../internals/defaultizeColor';\nimport { blueberryTwilightPalette } from '../colorPalettes';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const SeriesContext = /*#__PURE__*/React.createContext({});\nconst seriesTypeFormatter = {\n  bar: barSeriesFormatter,\n  scatter: scatterSeriesFormatter,\n  line: lineSeriesFormatter,\n  pie: pieSeriesFormatter\n};\n/**\n * This methods is the interface between what the developer is providing and what components receives\n * To simplify the components behaviors, it groups series by type, such that LinePlots props are not updated if some line data are modified\n * It also add defaultized values such as the ids, colors\n * @param series The array of series provided by devs\n * @param colors The color palette used to defaultize series colors\n * @returns An object structuring all the series by type.\n */\n\nconst formatSeries = (series, colors, dataset) => {\n  // Group series by type\n  const seriesGroups = {};\n  series.forEach((seriesData, seriesIndex) => {\n    var _seriesGroups$type;\n\n    const {\n      id = `auto-generated-id-${seriesIndex}`,\n      type\n    } = seriesData;\n\n    if (seriesGroups[type] === undefined) {\n      seriesGroups[type] = {\n        series: {},\n        seriesOrder: []\n      };\n    }\n\n    if (((_seriesGroups$type = seriesGroups[type]) == null ? void 0 : _seriesGroups$type.series[id]) !== undefined) {\n      throw new Error(`MUI: series' id \"${id}\" is not unique`);\n    }\n\n    seriesGroups[type].series[id] = _extends({\n      id\n    }, defaultizeColor(seriesData, seriesIndex, colors));\n    seriesGroups[type].seriesOrder.push(id);\n  });\n  const formattedSeries = {}; // Apply formater on a type group\n\n  Object.keys(seriesTypeFormatter).forEach(type => {\n    if (seriesGroups[type] !== undefined) {\n      var _seriesTypeFormatter$, _seriesTypeFormatter$2;\n\n      formattedSeries[type] = (_seriesTypeFormatter$ = (_seriesTypeFormatter$2 = seriesTypeFormatter[type]) == null ? void 0 : _seriesTypeFormatter$2.call(seriesTypeFormatter, seriesGroups[type], dataset)) != null ? _seriesTypeFormatter$ : seriesGroups[type];\n    }\n  });\n  return formattedSeries;\n};\n\nexport function SeriesContextProvider({\n  series,\n  dataset,\n  colors = blueberryTwilightPalette,\n  children\n}) {\n  const theme = useTheme();\n  const formattedSeries = React.useMemo(() => formatSeries(series, typeof colors === 'function' ? colors(theme.palette.mode) : colors, dataset), [series, colors, theme.palette.mode, dataset]);\n  return /*#__PURE__*/_jsx(SeriesContext.Provider, {\n    value: formattedSeries,\n    children: children\n  });\n}","map":{"version":3,"names":["_extends","React","useTheme","barSeriesFormatter","scatterSeriesFormatter","lineSeriesFormatter","pieSeriesFormatter","defaultizeColor","blueberryTwilightPalette","jsx","_jsx","SeriesContext","createContext","seriesTypeFormatter","bar","scatter","line","pie","formatSeries","series","colors","dataset","seriesGroups","forEach","seriesData","seriesIndex","_seriesGroups$type","id","type","undefined","seriesOrder","Error","push","formattedSeries","Object","keys","_seriesTypeFormatter$","_seriesTypeFormatter$2","call","SeriesContextProvider","children","theme","useMemo","palette","mode","Provider","value"],"sources":["/Users/suprimpoudel/WebstormProjects/bus_buddy_web/node_modules/@mui/x-charts/esm/context/SeriesContextProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport barSeriesFormatter from '../BarChart/formatter';\nimport scatterSeriesFormatter from '../ScatterChart/formatter';\nimport lineSeriesFormatter from '../LineChart/formatter';\nimport pieSeriesFormatter from '../PieChart/formatter';\nimport { defaultizeColor } from '../internals/defaultizeColor';\nimport { blueberryTwilightPalette } from '../colorPalettes';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const SeriesContext = /*#__PURE__*/React.createContext({});\nconst seriesTypeFormatter = {\n  bar: barSeriesFormatter,\n  scatter: scatterSeriesFormatter,\n  line: lineSeriesFormatter,\n  pie: pieSeriesFormatter\n};\n\n/**\n * This methods is the interface between what the developer is providing and what components receives\n * To simplify the components behaviors, it groups series by type, such that LinePlots props are not updated if some line data are modified\n * It also add defaultized values such as the ids, colors\n * @param series The array of series provided by devs\n * @param colors The color palette used to defaultize series colors\n * @returns An object structuring all the series by type.\n */\nconst formatSeries = (series, colors, dataset) => {\n  // Group series by type\n  const seriesGroups = {};\n  series.forEach((seriesData, seriesIndex) => {\n    var _seriesGroups$type;\n    const {\n      id = `auto-generated-id-${seriesIndex}`,\n      type\n    } = seriesData;\n    if (seriesGroups[type] === undefined) {\n      seriesGroups[type] = {\n        series: {},\n        seriesOrder: []\n      };\n    }\n    if (((_seriesGroups$type = seriesGroups[type]) == null ? void 0 : _seriesGroups$type.series[id]) !== undefined) {\n      throw new Error(`MUI: series' id \"${id}\" is not unique`);\n    }\n    seriesGroups[type].series[id] = _extends({\n      id\n    }, defaultizeColor(seriesData, seriesIndex, colors));\n    seriesGroups[type].seriesOrder.push(id);\n  });\n  const formattedSeries = {};\n  // Apply formater on a type group\n  Object.keys(seriesTypeFormatter).forEach(type => {\n    if (seriesGroups[type] !== undefined) {\n      var _seriesTypeFormatter$, _seriesTypeFormatter$2;\n      formattedSeries[type] = (_seriesTypeFormatter$ = (_seriesTypeFormatter$2 = seriesTypeFormatter[type]) == null ? void 0 : _seriesTypeFormatter$2.call(seriesTypeFormatter, seriesGroups[type], dataset)) != null ? _seriesTypeFormatter$ : seriesGroups[type];\n    }\n  });\n  return formattedSeries;\n};\nexport function SeriesContextProvider({\n  series,\n  dataset,\n  colors = blueberryTwilightPalette,\n  children\n}) {\n  const theme = useTheme();\n  const formattedSeries = React.useMemo(() => formatSeries(series, typeof colors === 'function' ? colors(theme.palette.mode) : colors, dataset), [series, colors, theme.palette.mode, dataset]);\n  return /*#__PURE__*/_jsx(SeriesContext.Provider, {\n    value: formattedSeries,\n    children: children\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as React from 'react';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { isBandScale } from '../internals/isBandScale';\n/**\n * For a given scale return a function that map value to their position.\n * Usefull when dealing with specific scale such as band.\n * @param scale The scale to use\n * @returns (value: any) => number\n */\n\nexport function getValueToPositionMapper(scale) {\n  if (isBandScale(scale)) {\n    return value => scale(value) + scale.bandwidth() / 2;\n  }\n\n  return value => scale(value);\n}\nexport function useXScale(identifier) {\n  const {\n    xAxis,\n    xAxisIds\n  } = React.useContext(CartesianContext);\n  const id = typeof identifier === 'string' ? identifier : xAxisIds[identifier != null ? identifier : 0];\n  return xAxis[id].scale;\n}\nexport function useYScale(identifier) {\n  const {\n    yAxis,\n    yAxisIds\n  } = React.useContext(CartesianContext);\n  const id = typeof identifier === 'string' ? identifier : yAxisIds[identifier != null ? identifier : 0];\n  return yAxis[id].scale;\n}","map":{"version":3,"names":["React","CartesianContext","isBandScale","getValueToPositionMapper","scale","value","bandwidth","useXScale","identifier","xAxis","xAxisIds","useContext","id","useYScale","yAxis","yAxisIds"],"sources":["/Users/suprimpoudel/WebstormProjects/bus_buddy_web/node_modules/@mui/x-charts/esm/hooks/useScale.js"],"sourcesContent":["import * as React from 'react';\nimport { CartesianContext } from '../context/CartesianContextProvider';\nimport { isBandScale } from '../internals/isBandScale';\n/**\n * For a given scale return a function that map value to their position.\n * Usefull when dealing with specific scale such as band.\n * @param scale The scale to use\n * @returns (value: any) => number\n */\nexport function getValueToPositionMapper(scale) {\n  if (isBandScale(scale)) {\n    return value => scale(value) + scale.bandwidth() / 2;\n  }\n  return value => scale(value);\n}\nexport function useXScale(identifier) {\n  const {\n    xAxis,\n    xAxisIds\n  } = React.useContext(CartesianContext);\n  const id = typeof identifier === 'string' ? identifier : xAxisIds[identifier != null ? identifier : 0];\n  return xAxis[id].scale;\n}\nexport function useYScale(identifier) {\n  const {\n    yAxis,\n    yAxisIds\n  } = React.useContext(CartesianContext);\n  const id = typeof identifier === 'string' ? identifier : yAxisIds[identifier != null ? identifier : 0];\n  return yAxis[id].scale;\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,qCAAjC;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,wBAAT,CAAkCC,KAAlC,EAAyC;EAC9C,IAAIF,WAAW,CAACE,KAAD,CAAf,EAAwB;IACtB,OAAOC,KAAK,IAAID,KAAK,CAACC,KAAD,CAAL,GAAeD,KAAK,CAACE,SAAN,KAAoB,CAAnD;EACD;;EACD,OAAOD,KAAK,IAAID,KAAK,CAACC,KAAD,CAArB;AACD;AACD,OAAO,SAASE,SAAT,CAAmBC,UAAnB,EAA+B;EACpC,MAAM;IACJC,KADI;IAEJC;EAFI,IAGFV,KAAK,CAACW,UAAN,CAAiBV,gBAAjB,CAHJ;EAIA,MAAMW,EAAE,GAAG,OAAOJ,UAAP,KAAsB,QAAtB,GAAiCA,UAAjC,GAA8CE,QAAQ,CAACF,UAAU,IAAI,IAAd,GAAqBA,UAArB,GAAkC,CAAnC,CAAjE;EACA,OAAOC,KAAK,CAACG,EAAD,CAAL,CAAUR,KAAjB;AACD;AACD,OAAO,SAASS,SAAT,CAAmBL,UAAnB,EAA+B;EACpC,MAAM;IACJM,KADI;IAEJC;EAFI,IAGFf,KAAK,CAACW,UAAN,CAAiBV,gBAAjB,CAHJ;EAIA,MAAMW,EAAE,GAAG,OAAOJ,UAAP,KAAsB,QAAtB,GAAiCA,UAAjC,GAA8CO,QAAQ,CAACP,UAAU,IAAI,IAAd,GAAqBA,UAArB,GAAkC,CAAnC,CAAjE;EACA,OAAOM,KAAK,CAACF,EAAD,CAAL,CAAUR,KAAjB;AACD"},"metadata":{},"sourceType":"module"}
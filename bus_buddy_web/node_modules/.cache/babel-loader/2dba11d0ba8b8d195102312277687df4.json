{"ast":null,"code":"// import React, {useEffect, useState} from 'react';\n// import {Box, Button, TextField} from \"@mui/material\";\n// import {Formik} from \"formik\";\n// import * as yup from \"yup\";\n// import useMediaQuery from \"@mui/material/useMediaQuery\";\n// import Header from \"../../components/Header\";\n// import {useNavigate, useParams} from \"react-router-dom\";\n// import axios from \"axios\";\n// import {placeEndPoint, userEndPoint} from \"../../data/apiConstants\";\n// import HandleException from \"../../util/Toastify\";\n// import {toast} from \"react-toastify\";\n// import {passwordRegRxp, phoneRegExp} from \"../../util/constants/regex_constants\";\n//\n// const AddUpdateRoute = () => {\n//     const navigator = useNavigate()\n//     const isNonMobile = useMediaQuery(\"(min-width:600px)\");\n//\n//     let {id} = useParams();\n//\n//     const [place, setPlace] = useState({\n//         id: null, name: \"\", startDestination: {\n//             id: null\n//         }, endDestination: {\n//             id: null\n//         },\n//     });\n//\n//     const initialValues = {\n//         name: place.firstName,\n//         startDestination: place.startDestination,\n//         endDestination: place.endDestination,\n//     }\n//\n//     const handleFormSubmit = async (values) => {\n//         if (place.id == null) {\n//             axios.post(placeEndPoint, values)\n//                 .then(() => {\n//                     toast.success(\"Successfully created place\");\n//                     navigator(-1);\n//                 })\n//                 .catch((error) => {\n//                     HandleException(error);\n//                 });\n//         } else {\n//             values.id = place.id\n//\n//             axios.put(`${placeEndPoint}/${place.id}`, values)\n//                 .then(() => {\n//                     toast.success(\"Successfully updated place\");\n//                     navigator(-1);\n//                 })\n//                 .catch((error) => {\n//                     HandleException(error);\n//                 });\n//         }\n//     };\n//\n//     const checkoutSchema = yup.object().shape({\n//         name: yup.string().required(\"required\"),\n//         lastName: yup.string().required(\"required\"),\n//         email: yup.string().email(\"invalid email\").required(\"required\"),\n//         phoneNumber: yup\n//             .string()\n//             .matches(phoneRegExp, \"Phone number is not valid\")\n//             .required(\"required\"),\n//         password: yup\n//             .string()\n//             .when('id', {\n//                 is: null,\n//                 then: yup.string().matches(passwordRegRxp, \"Password must be at least 8 characters long\").required(\"required\"),\n//                 otherwise: yup.string(),\n//             }),\n//     });\n//\n//     useEffect(() => {\n//         getUserData()\n//     }, []);\n//\n//     const getUserData = () => {\n//         if (id != null) {\n//             axios.get(userEndPoint + \"/\" + id)\n//                 .then((response) => {\n//                     const user = response.data.result;\n//                     setPlace(user)\n//                 })\n//                 .catch((error) => {\n//                     HandleException(error)\n//                 });\n//         }\n//     }\n//\n//     return (<Box m=\"20px\">\n//         {id == null ? <Header title=\"Create User\" subtitle=\"Create a New User\"/> :\n//             <Header title=\"Update User\" subtitle=\"Update User Details\"/>}\n//\n//         <Formik\n//             enableReinitialize={true}\n//             onSubmit={handleFormSubmit}\n//             initialValues={initialValues}\n//             validationSchema={checkoutSchema}\n//         >\n//             {({\n//                   values, errors, touched, handleBlur, handleChange, handleSubmit,\n//               }) => (<form onSubmit={handleSubmit}>\n//                 <Box\n//                     display=\"grid\"\n//                     gap=\"30px\"\n//                     gridTemplateColumns=\"repeat(4, minmax(0, 1fr))\"\n//                     sx={{\n//                         \"& > div\": {gridColumn: isNonMobile ? undefined : \"span 4\"},\n//                     }}\n//                 >\n//                     <TextField\n//                         fullWidth\n//                         variant=\"filled\"\n//                         type=\"text\"\n//                         label=\"First Name\"\n//                         onBlur={handleBlur}\n//                         onChange={handleChange}\n//                         value={values.firstName} // Make sure this is correct\n//                         name=\"firstName\"\n//                         error={!!touched.firstName && !!errors.firstName}\n//                         helperText={touched.firstName && errors.firstName}\n//                         sx={{gridColumn: \"span 2\"}}\n//                     />\n//                     <TextField\n//                         fullWidth\n//                         variant=\"filled\"\n//                         type=\"text\"\n//                         label=\"Last Name\"\n//                         onBlur={handleBlur}\n//                         onChange={handleChange}\n//                         value={values.lastName}\n//                         name=\"lastName\"\n//                         error={!!touched.lastName && !!errors.lastName}\n//                         helperText={touched.lastName && errors.lastName}\n//                         sx={{gridColumn: \"span 2\"}}\n//                     />\n//                     <TextField\n//                         fullWidth\n//                         variant=\"filled\"\n//                         type=\"text\"\n//                         label=\"Email\"\n//                         onBlur={handleBlur}\n//                         onChange={handleChange}\n//                         value={values.email}\n//                         name=\"email\"\n//                         error={!!touched.email && !!errors.email}\n//                         helperText={touched.email && errors.email}\n//                         sx={{gridColumn: \"span 2\"}}\n//                     />\n//                     <TextField\n//                         fullWidth\n//                         variant=\"filled\"\n//                         type=\"text\"\n//                         label=\"Phone Number\"\n//                         onBlur={handleBlur}\n//                         onChange={handleChange}\n//                         value={values.phoneNumber}\n//                         name=\"phoneNumber\"\n//                         error={!!touched.phoneNumber && !!errors.phoneNumber}\n//                         helperText={touched.phoneNumber && errors.phoneNumber}\n//                         sx={{gridColumn: \"span 2\"}}\n//                     />\n//\n//                     {id == null ? <TextField\n//                         fullWidth\n//                         variant=\"filled\"\n//                         type=\"password\"\n//                         label=\"Password\"\n//                         onBlur={handleBlur}\n//                         onChange={handleChange}\n//                         value={values.password}\n//                         name=\"password\"\n//                         error={!!touched.password && !!errors.password}\n//                         helperText={touched.password && errors.password}\n//                         sx={{gridColumn: \"span 2\"}}\n//                     /> : ''}\n//\n//                 </Box>\n//                 <Box display=\"flex\" justifyContent=\"end\" mt=\"20px\">\n//\n//                     <Button type=\"submit\" color=\"secondary\" variant=\"contained\">\n//                         {id == null ? \"Create New User\" : \"Update User\"}\n//                     </Button>\n//                 </Box>\n//             </form>)}\n//         </Formik>\n//     </Box>);\n// };\n//\n// export default AddUpdateRoute;","map":{"version":3,"names":[],"sources":["/Users/suprimpoudel/WebstormProjects/bus_buddy_web/src/scenes/add_update_route/index.jsx"],"sourcesContent":["// import React, {useEffect, useState} from 'react';\n// import {Box, Button, TextField} from \"@mui/material\";\n// import {Formik} from \"formik\";\n// import * as yup from \"yup\";\n// import useMediaQuery from \"@mui/material/useMediaQuery\";\n// import Header from \"../../components/Header\";\n// import {useNavigate, useParams} from \"react-router-dom\";\n// import axios from \"axios\";\n// import {placeEndPoint, userEndPoint} from \"../../data/apiConstants\";\n// import HandleException from \"../../util/Toastify\";\n// import {toast} from \"react-toastify\";\n// import {passwordRegRxp, phoneRegExp} from \"../../util/constants/regex_constants\";\n//\n// const AddUpdateRoute = () => {\n//     const navigator = useNavigate()\n//     const isNonMobile = useMediaQuery(\"(min-width:600px)\");\n//\n//     let {id} = useParams();\n//\n//     const [place, setPlace] = useState({\n//         id: null, name: \"\", startDestination: {\n//             id: null\n//         }, endDestination: {\n//             id: null\n//         },\n//     });\n//\n//     const initialValues = {\n//         name: place.firstName,\n//         startDestination: place.startDestination,\n//         endDestination: place.endDestination,\n//     }\n//\n//     const handleFormSubmit = async (values) => {\n//         if (place.id == null) {\n//             axios.post(placeEndPoint, values)\n//                 .then(() => {\n//                     toast.success(\"Successfully created place\");\n//                     navigator(-1);\n//                 })\n//                 .catch((error) => {\n//                     HandleException(error);\n//                 });\n//         } else {\n//             values.id = place.id\n//\n//             axios.put(`${placeEndPoint}/${place.id}`, values)\n//                 .then(() => {\n//                     toast.success(\"Successfully updated place\");\n//                     navigator(-1);\n//                 })\n//                 .catch((error) => {\n//                     HandleException(error);\n//                 });\n//         }\n//     };\n//\n//     const checkoutSchema = yup.object().shape({\n//         name: yup.string().required(\"required\"),\n//         lastName: yup.string().required(\"required\"),\n//         email: yup.string().email(\"invalid email\").required(\"required\"),\n//         phoneNumber: yup\n//             .string()\n//             .matches(phoneRegExp, \"Phone number is not valid\")\n//             .required(\"required\"),\n//         password: yup\n//             .string()\n//             .when('id', {\n//                 is: null,\n//                 then: yup.string().matches(passwordRegRxp, \"Password must be at least 8 characters long\").required(\"required\"),\n//                 otherwise: yup.string(),\n//             }),\n//     });\n//\n//     useEffect(() => {\n//         getUserData()\n//     }, []);\n//\n//     const getUserData = () => {\n//         if (id != null) {\n//             axios.get(userEndPoint + \"/\" + id)\n//                 .then((response) => {\n//                     const user = response.data.result;\n//                     setPlace(user)\n//                 })\n//                 .catch((error) => {\n//                     HandleException(error)\n//                 });\n//         }\n//     }\n//\n//     return (<Box m=\"20px\">\n//         {id == null ? <Header title=\"Create User\" subtitle=\"Create a New User\"/> :\n//             <Header title=\"Update User\" subtitle=\"Update User Details\"/>}\n//\n//         <Formik\n//             enableReinitialize={true}\n//             onSubmit={handleFormSubmit}\n//             initialValues={initialValues}\n//             validationSchema={checkoutSchema}\n//         >\n//             {({\n//                   values, errors, touched, handleBlur, handleChange, handleSubmit,\n//               }) => (<form onSubmit={handleSubmit}>\n//                 <Box\n//                     display=\"grid\"\n//                     gap=\"30px\"\n//                     gridTemplateColumns=\"repeat(4, minmax(0, 1fr))\"\n//                     sx={{\n//                         \"& > div\": {gridColumn: isNonMobile ? undefined : \"span 4\"},\n//                     }}\n//                 >\n//                     <TextField\n//                         fullWidth\n//                         variant=\"filled\"\n//                         type=\"text\"\n//                         label=\"First Name\"\n//                         onBlur={handleBlur}\n//                         onChange={handleChange}\n//                         value={values.firstName} // Make sure this is correct\n//                         name=\"firstName\"\n//                         error={!!touched.firstName && !!errors.firstName}\n//                         helperText={touched.firstName && errors.firstName}\n//                         sx={{gridColumn: \"span 2\"}}\n//                     />\n//                     <TextField\n//                         fullWidth\n//                         variant=\"filled\"\n//                         type=\"text\"\n//                         label=\"Last Name\"\n//                         onBlur={handleBlur}\n//                         onChange={handleChange}\n//                         value={values.lastName}\n//                         name=\"lastName\"\n//                         error={!!touched.lastName && !!errors.lastName}\n//                         helperText={touched.lastName && errors.lastName}\n//                         sx={{gridColumn: \"span 2\"}}\n//                     />\n//                     <TextField\n//                         fullWidth\n//                         variant=\"filled\"\n//                         type=\"text\"\n//                         label=\"Email\"\n//                         onBlur={handleBlur}\n//                         onChange={handleChange}\n//                         value={values.email}\n//                         name=\"email\"\n//                         error={!!touched.email && !!errors.email}\n//                         helperText={touched.email && errors.email}\n//                         sx={{gridColumn: \"span 2\"}}\n//                     />\n//                     <TextField\n//                         fullWidth\n//                         variant=\"filled\"\n//                         type=\"text\"\n//                         label=\"Phone Number\"\n//                         onBlur={handleBlur}\n//                         onChange={handleChange}\n//                         value={values.phoneNumber}\n//                         name=\"phoneNumber\"\n//                         error={!!touched.phoneNumber && !!errors.phoneNumber}\n//                         helperText={touched.phoneNumber && errors.phoneNumber}\n//                         sx={{gridColumn: \"span 2\"}}\n//                     />\n//\n//                     {id == null ? <TextField\n//                         fullWidth\n//                         variant=\"filled\"\n//                         type=\"password\"\n//                         label=\"Password\"\n//                         onBlur={handleBlur}\n//                         onChange={handleChange}\n//                         value={values.password}\n//                         name=\"password\"\n//                         error={!!touched.password && !!errors.password}\n//                         helperText={touched.password && errors.password}\n//                         sx={{gridColumn: \"span 2\"}}\n//                     /> : ''}\n//\n//                 </Box>\n//                 <Box display=\"flex\" justifyContent=\"end\" mt=\"20px\">\n//\n//                     <Button type=\"submit\" color=\"secondary\" variant=\"contained\">\n//                         {id == null ? \"Create New User\" : \"Update User\"}\n//                     </Button>\n//                 </Box>\n//             </form>)}\n//         </Formik>\n//     </Box>);\n// };\n//\n// export default AddUpdateRoute;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}